# Generated by Django 3.1 on 2024-01-17 10:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('references', '__first__'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inn', models.CharField(max_length=30, verbose_name='ИНН')),
                ('city', models.CharField(max_length=30, verbose_name='Город агентства')),
                ('is_approved', models.BooleanField(verbose_name='Подтверждено')),
                ('is_deleted', models.BooleanField(verbose_name='Удалено')),
                ('type', models.CharField(blank=True, max_length=20, null=True, verbose_name='Тип')),
                ('files', models.JSONField(blank=True, null=True, verbose_name='Файлы (документы агентства)')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название')),
                ('tags', models.JSONField(blank=True, null=True, verbose_name='Теги [АМО]')),
                ('amocrm_id', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('state_registration_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='ОГРН/ОРНИП')),
                ('legal_address', models.TextField(blank=True, null=True, verbose_name='Юридически адрес')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название банка')),
                ('bank_identification_code', models.CharField(blank=True, max_length=9, null=True, verbose_name='БИК')),
                ('checking_account', models.CharField(blank=True, max_length=20, null=True, verbose_name='Расчетный счет')),
                ('correspondent_account', models.CharField(blank=True, max_length=20, null=True, verbose_name='Корреспондентский счет')),
                ('signatory_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Имя подписанта')),
                ('signatory_surname', models.CharField(blank=True, max_length=50, null=True, verbose_name='Фамилия подписанта')),
                ('signatory_patronymic', models.CharField(blank=True, max_length=50, null=True, verbose_name='Отчество подписанта')),
                ('signatory_registry_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Номер регистрации в реестре')),
                ('signatory_sign_date', models.DateField(blank=True, null=True, verbose_name='Дата подписания')),
            ],
            options={
                'verbose_name': 'Агентство',
                'verbose_name_plural': ' 2.2. Агентства',
                'db_table': 'agencies_agency',
                'ordering': ['-created_at'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyGeneralType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.IntegerField(default=0, verbose_name='Сортировка')),
                ('slug', models.CharField(max_length=20, unique=True, verbose_name='Слаг')),
                ('label', models.CharField(max_length=40, verbose_name='Название типа')),
            ],
            options={
                'verbose_name': 'Тип агентств',
                'verbose_name_plural': '2.11. [Справочник] Типы агентств',
                'db_table': 'agencies_agency_general_type',
                'ordering': ('sort',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='Создано')),
                ('state_before', models.JSONField(blank=True, null=True, verbose_name='Состояние до')),
                ('state_after', models.JSONField(blank=True, null=True, verbose_name='Состояние после')),
                ('state_difference', models.JSONField(blank=True, null=True, verbose_name='Разница состояний')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Контент')),
                ('error_data', models.TextField(blank=True, null=True, verbose_name='Данные ошибки')),
                ('response_data', models.TextField(blank=True, null=True, verbose_name='Данные ответа')),
                ('use_case', models.CharField(blank=True, max_length=200, null=True, verbose_name='Сценарий')),
            ],
            options={
                'verbose_name': 'Лог агентства',
                'verbose_name_plural': 'Логи агентств',
                'db_table': 'agencies_agencylog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CabinetUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, help_text="Должен быть в формате “'+7XXXXXXXXXX", max_length=20, null=True)),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(blank=True, help_text='В шифрованном виде. Используется только для авторизации агентов/агентств/администраторов (клиенты авторизуются по коду)', max_length=200, null=True)),
                ('code', models.CharField(blank=True, help_text='Отправленный при авторизации клиента SMS-код', max_length=4, null=True)),
                ('code_time', models.DateTimeField(blank=True, help_text='Количество времени, пока SMS код активен', null=True)),
                ('token', models.UUIDField(blank=True, help_text='Токен для валидации кода SMS. Генерируется при запросе кода', null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('surname', models.CharField(blank=True, max_length=50, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=50, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField()),
                ('is_deleted', models.BooleanField(help_text='Удаленные пользователи не могут войти на сайт')),
                ('amocrm_id', models.BigIntegerField(blank=True, null=True)),
                ('type', models.CharField(choices=[('admin', 'Админ'), ('agent', 'Агент'), ('client', 'Клиент'), ('repres', 'Представитель'), ('manager', 'Менеджер'), ('rop', 'Руководитель отдела продаж')], help_text='Роль пользователя в системе', max_length=20, verbose_name='Тип/Роль')),
                ('origin', models.CharField(choices=[('amocrm', 'Импорт из АМО CRM'), ('sms', 'Авторизация через СМС'), ('agent_assign', 'Закрепление агентом')], default=None, max_length=30, null=True, verbose_name='Источник')),
                ('is_imported', models.BooleanField(help_text='Проверяет при валидации (при первой проверке телефона [регистрации клиента] - FALSE, после валидации - ставится TRUE и создается в АМО)')),
                ('email_token', models.CharField(blank=True, help_text='Токен эл. почты пользователя, который позволяет авторизоваться/активировать почту в ЛК через ссылку в письме (не используется)', max_length=100, null=True)),
                ('passport_series', models.CharField(blank=True, max_length=20, null=True)),
                ('passport_number', models.CharField(blank=True, max_length=20, null=True)),
                ('is_onboarded', models.BooleanField()),
                ('is_approved', models.BooleanField(help_text='Подтвержден пользователь (при авторизации) или нет, не подтвержденные пользователи не имеют право войти в ЛК (по умолчанию подтверждены все)')),
                ('one_time_password', models.CharField(blank=True, max_length=200, null=True)),
                ('discard_token', models.CharField(blank=True, max_length=100, null=True)),
                ('work_end', models.DateField(blank=True, null=True)),
                ('reset_time', models.DateTimeField(blank=True, null=True)),
                ('work_start', models.DateField(blank=True, help_text='Дата начала работы с клиентом (закрепления)', null=True)),
                ('interested_type', models.CharField(blank=True, help_text='Интересующий тип недвижимости (не используется)', max_length=20, null=True)),
                ('is_brokers_client', models.BooleanField(help_text='Флагом отмечены клиенты агентств (т.е. они связаны с каким-то агентом)')),
                ('is_independent_client', models.BooleanField(help_text='Флагом отмечены клиенты пришедшие самостоятельно и работающие напрямую с застройщиком (т.е. они не связаны с каким-то агентом)')),
                ('is_test_user', models.BooleanField(help_text="Сделки с тестовым клиентом будут отмечаться тегом 'Тест' в АМО")),
                ('sms_send', models.BooleanField(default=False, verbose_name='СМС отправлено')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('auth_first_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата первой авторизации')),
                ('auth_last_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата последней авторизации')),
                ('interested_sub', models.BooleanField(default=False, verbose_name='Подписка на избранное')),
                ('assignation_comment', models.TextField(blank=True, help_text='Комментарий агента, указанный при закреплении данного клиента', null=True, verbose_name='Комментарий при закреплении клиента')),
                ('loyalty_point_amount', models.IntegerField(blank=True, help_text='Только для информации, редактируется через микросервис лояльности (только агенты и представители)', null=True, verbose_name='Остаток баллов по программе лояльности')),
                ('loyalty_status_name', models.CharField(blank=True, help_text='Только для информации, редактируется через микросервис лояльности (только агенты и представители)', max_length=100, null=True, verbose_name='Статус лояльности')),
                ('loyalty_status_icon', models.FileField(blank=True, max_length=300, null=True, upload_to='u/a/f', verbose_name='Изображение статуса лояльности')),
                ('loyalty_status_level_icon', models.FileField(blank=True, max_length=300, null=True, upload_to='u/a/f', verbose_name='Цветное изображение статуса лояльности')),
                ('loyalty_status_substrate_card', models.FileField(blank=True, max_length=300, null=True, upload_to='u/a/f', verbose_name='Подложка (карточка участника) статуса лояльности')),
                ('loyalty_status_icon_profile', models.FileField(blank=True, max_length=300, null=True, upload_to='u/a/f', verbose_name='Подложка (профиль) статуса лояльности')),
                ('date_assignment_loyalty_status', models.DateTimeField(blank=True, null=True, verbose_name='Дата присвоения статуса лояльности')),
                ('is_offer_accepted', models.BooleanField(default=False, verbose_name='Принята оферта')),
                ('ready_for_super_auth', models.BooleanField(default=False, verbose_name='Под данным пользователем может авторизоваться суперюзер')),
                ('can_login_as_another_user', models.BooleanField(default=False, help_text='Нельзя менять хэш пароль у суперюзеров', verbose_name='Суперпользователь')),
                ('client_token_for_superuser', models.CharField(blank=True, max_length=300, null=True, verbose_name='Токен авторизации для клиента (для использования суперпользователями)')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': ' 2.1. [Пользователи] Все',
                'db_table': 'users_user',
                'ordering': ['-created_at'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CityUserThrough',
            fields=[
                ('city', models.OneToOneField(db_column='city_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='cities_through', serialize=False, to='references.cities', verbose_name='Город')),
            ],
            options={
                'db_table': 'users_cities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FakeUserPhone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(help_text='Сохранять в формате: +79991112233. Для данного телефона по умолчанию будет использоваться указанный код авторизации в ЛК Клиента', max_length=20, unique=True)),
                ('code', models.CharField(default='9999', help_text='По умолчанию: 9999', max_length=4)),
            ],
            options={
                'verbose_name': 'Тестовый телефон пользователя',
                'verbose_name_plural': ' 2.6. [Справочник] Телефоны тестовых пользователей (для отправки заглушки SMS)',
                'db_table': 'users_test_user_phones',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalDisputeData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispute_requested', models.DateTimeField(blank=True, null=True, verbose_name='Время оспаривания')),
                ('admin_update', models.DateTimeField(blank=True, null=True, verbose_name='Дата обновления статуса администратором')),
            ],
            options={
                'verbose_name': 'История оспаривания',
                'verbose_name_plural': ' 2.7. [Справочник] История оспаривания',
                'db_table': 'historical_dispute_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RealIpUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times', models.IntegerField(verbose_name='Количество запросов')),
                ('real_ip', models.CharField(max_length=20, verbose_name='IP адрес клиента')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'IP адрес клиента',
                'verbose_name_plural': ' 2.3. [Справочник] IP адреса пользователей',
                'db_table': 'users_real_ip',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StranaOfficeAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(max_length=100, verbose_name='ФИО админа')),
                ('email', models.CharField(max_length=100, verbose_name='Email')),
                ('responsible_kc', models.BooleanField(default=False, verbose_name='Является ответственным за КЦ')),
            ],
            options={
                'verbose_name': 'Администратор офиса',
                'verbose_name_plural': '2.12. Администратор офиса "Страна"',
                'db_table': 'users_strana_office_admin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='Создано')),
                ('state_before', models.JSONField(blank=True, null=True, verbose_name='Состояние до')),
                ('state_after', models.JSONField(blank=True, null=True, verbose_name='Состояние после')),
                ('state_difference', models.JSONField(blank=True, null=True, verbose_name='Разница состояний')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Контент')),
                ('error_data', models.TextField(blank=True, null=True, verbose_name='Данные ошибки')),
                ('response_data', models.TextField(blank=True, null=True, verbose_name='Данные ответа')),
                ('use_case', models.CharField(blank=True, max_length=200, null=True, verbose_name='Сценарий')),
            ],
            options={
                'verbose_name': 'Лог пользователя',
                'verbose_name_plural': 'Логи пользователей',
                'db_table': 'users_userlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserNotificationMute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times', models.IntegerField(verbose_name='Количество запросов')),
                ('phone', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Блокировка пользователя',
                'verbose_name_plural': ' 2.4. [Справочник] Блокировки IP адресов пользователей',
                'db_table': 'users_notification_mute',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Роль пользователя', max_length=200, null=True, verbose_name='Роль')),
                ('slug', models.CharField(max_length=50, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': ' 2.5. [Справочник] Роли',
                'db_table': 'users_roles',
                'managed': False,
            },
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.CreateModel(
            name='CabinetAdmin',
            fields=[
            ],
            options={
                'verbose_name': 'Администраторы',
                'verbose_name_plural': '2.10. [Пользователи] Администраторы',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.cabinetuser',),
        ),
        migrations.CreateModel(
            name='CabinetAgent',
            fields=[
            ],
            options={
                'verbose_name': 'Агент',
                'verbose_name_plural': ' 2.9. [Пользователи] Агенты',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.cabinetuser',),
        ),
        migrations.CreateModel(
            name='CabinetClient',
            fields=[
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': ' 2.8. [Пользователи] Клиенты',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.cabinetuser',),
        ),
    ]

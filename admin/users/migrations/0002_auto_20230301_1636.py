# Generated by Django 3.1 on 2023-03-01 13:36

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CabinetChecksTerms',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('is_agent', models.CharField(choices=[('yes', 'Да'), ('no', 'Нет'), ('skip', 'Не важно')], max_length=10, verbose_name='Есть агент')),
                ('more_days', models.IntegerField(blank=True, null=True, verbose_name='Больше скольки дней сделка находится в статусе')),
                ('less_days', models.IntegerField(blank=True, null=True, verbose_name='Меньше скольки дней сделка находится в статусе')),
                ('is_assign_agency_status', models.CharField(choices=[('yes', 'Да'), ('no', 'Нет'), ('skip', 'Не важно')], default='skip', max_length=10, verbose_name="Была ли сделка в статусе 'Фиксация за АН'")),
                ('priority', models.IntegerField(verbose_name='Приоритет')),
                ('unique_value', models.CharField(choices=[('unique', 'Уникален'), ('not_unique', 'Не уникален'), ('can_dispute', 'Закреплен, но можно оспорить')], max_length=30, verbose_name='Статус уникальности')),
            ],
            options={
                'verbose_name': 'Условие проверки',
                'verbose_name_plural': 'Условия проверки',
                'db_table': 'users_checks_terms',
                'ordering': ['priority'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CabinetUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('password', models.CharField(blank=True, max_length=200, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('code', models.CharField(blank=True, max_length=4, null=True)),
                ('code_time', models.DateTimeField(blank=True, null=True)),
                ('token', models.UUIDField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('surname', models.CharField(blank=True, max_length=50, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=50, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField()),
                ('is_superuser', models.BooleanField()),
                ('is_deleted', models.BooleanField()),
                ('amocrm_id', models.BigIntegerField(blank=True, null=True)),
                ('type', models.CharField(max_length=20)),
                ('is_imported', models.BooleanField()),
                ('email_token', models.CharField(blank=True, max_length=100, null=True)),
                ('passport_series', models.CharField(blank=True, max_length=20, null=True)),
                ('passport_number', models.CharField(blank=True, max_length=20, null=True)),
                ('is_onboarded', models.BooleanField()),
                ('duty_type', models.CharField(blank=True, max_length=20, null=True)),
                ('is_approved', models.BooleanField()),
                ('one_time_password', models.CharField(blank=True, max_length=200, null=True)),
                ('discard_token', models.CharField(blank=True, max_length=100, null=True)),
                ('work_end', models.DateField(blank=True, null=True)),
                ('reset_time', models.DateTimeField(blank=True, null=True)),
                ('maintained_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('work_start', models.DateField(blank=True, null=True)),
                ('interested_type', models.CharField(blank=True, max_length=20, null=True)),
                ('is_brokers_client', models.BooleanField()),
                ('is_independent_client', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users_user',
                'ordering': ['-created_at'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_phone', models.CharField(blank=True, help_text='Номер телефона', max_length=20, null=True, verbose_name='Номер телефона')),
                ('status', models.CharField(choices=[('unique', 'Уникальный'), ('not_unique', 'Неуникальный'), ('can_dispute', 'Закреплен, но можно оспорить'), ('error', 'Ошибка')], max_length=50, verbose_name='Статус проверки')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Запрошено')),
            ],
            options={
                'verbose_name': 'Проверка',
                'verbose_name_plural': 'История проверок',
                'db_table': 'users_checks_history',
                'ordering': ['status', 'created_at'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CitiesThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'db_table': 'users_checks_terms_cities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PipelinesThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Воронка',
                'verbose_name_plural': 'Воронки',
                'db_table': 'users_checks_terms_pipelines',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RealIpUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times', models.IntegerField(verbose_name='Количество запросов')),
                ('real_ip', models.CharField(max_length=20, verbose_name='IP адрес клиента')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'IP адрес клиента',
                'verbose_name_plural': 'IP адреса клиентов',
                'db_table': 'users_real_ip',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatusesThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Статус',
                'verbose_name_plural': 'Статусы',
                'db_table': 'users_checks_terms_statuses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='Создано')),
                ('state_before', models.JSONField(blank=True, null=True, verbose_name='Состояние до')),
                ('state_after', models.JSONField(blank=True, null=True, verbose_name='Состояние после')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Контент')),
                ('error_data', models.TextField(blank=True, null=True, verbose_name='Данные ошибки')),
                ('response_data', models.TextField(blank=True, null=True, verbose_name='Данные ответа')),
                ('use_case', models.CharField(blank=True, max_length=200, null=True, verbose_name='Сценарий')),
            ],
            options={
                'verbose_name': 'Лог пользователя',
                'verbose_name_plural': 'Логи пользователей',
                'db_table': 'users_userlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserNotificationMute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times', models.IntegerField(verbose_name='Количество запросов')),
                ('phone', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Блокировка пользователя',
                'verbose_name_plural': 'Блокировки пользователей',
                'db_table': 'users_notification_mute',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Роль пользователя', max_length=200, null=True, verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'users_roles',
                'managed': False,
            },
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
    ]

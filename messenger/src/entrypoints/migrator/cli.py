from asyncio.runners import Runner
from types import SimpleNamespace

import typer
from alembic import command
from alembic.config import Config
from sqlalchemy.util import immutabledict

from src.core.logger import LoggerName, get_logger
from src.core.settings import load_settings
from src.entrypoints.migrator.helpers import load_fixtures
from src.modules.storage.settings import StorageSettings

migrator_cli = typer.Typer(name="Database migrator", no_args_is_help=True)
storage_settings = load_settings(StorageSettings, section_name="storage")
logger = get_logger(LoggerName.MIGRATION)


@migrator_cli.command(name="current", short_help="Display current revision(s)")
def current_version(
    ctx: typer.Context,
) -> None:
    command.current(ctx.obj.alembic_cfg)


@migrator_cli.command(name="autogenerate", short_help="Generate new revision")
def autogenerate_revision(
    ctx: typer.Context,
    name: str = typer.Option(default=None),
    message: str = typer.Option(default=None),
) -> None:
    result = command.revision(
        config=ctx.obj.alembic_cfg,
        autogenerate=True,
        rev_id=name,
        message=message,
    )
    logger.info("Autogenerated revision", result=result)


@migrator_cli.command(name="downgrade", short_help="Upgrade to specified version")
def downgrade_version(
    ctx: typer.Context,
    revision: str = typer.Argument(...),
) -> None:
    try:
        command.downgrade(
            config=ctx.obj.alembic_cfg,
            revision=revision,
        )
    except Exception as exc:
        logger.critical(f"Cannot downgrade to {revision}: {type(exc).__name__}", exc_info=True)
    else:
        logger.info(f"Downgraded to {revision}")


@migrator_cli.command(name="upgrade", short_help="Downgrade to specified version")
def upgrade_version(
    ctx: typer.Context,
    revision: str = typer.Argument(...),
) -> None:
    try:
        command.upgrade(
            config=ctx.obj.alembic_cfg,
            revision=revision,
        )
    except Exception as exc:
        logger.critical(f"Cannot upgrade to {revision}: {type(exc).__name__}", exc_info=True)
    else:
        logger.info(f"Upgraded to {revision}")


@migrator_cli.command(name="loadfixtures", short_help="Create object in database from fixtures data")
def load_fixtures_command(
    models: list[str] = typer.Argument(..., help="Load only specified models"),
) -> None:
    with Runner() as runner:
        runner.run(
            load_fixtures(
                settings=storage_settings,
                load_only=models,
                logger=logger,
            ),
        )


@migrator_cli.callback()
def create_alembic_cfg(
    ctx: typer.Context,
    host: str = typer.Option(default=storage_settings.db.host),
    port: int = typer.Option(default=storage_settings.db.port),
    database_name: str = typer.Option(default=storage_settings.db.database_name),
) -> None:
    storage_settings.db.port = port
    storage_settings.db.host = host
    storage_settings.db.database_name = database_name

    alembic_cfg = Config(
        config_args=immutabledict(
            {
                "sqlalchemy.url": storage_settings.db.dsn_sync,
                "script_location": "migrations",
                "create_schema_on_migration": storage_settings.migrator.create_schema_on_migration,
                "schema_name": storage_settings.migrator.schema_name,
            },
        ),
    )

    ctx.obj = SimpleNamespace(
        alembic_cfg=alembic_cfg,
        host=host,
        port=port,
        db_name=database_name,
    )
